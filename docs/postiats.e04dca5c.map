{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","language","tokenPostfix","defaultToken","keywords","keywords_dlr","keywords_srp","irregular_keyword_list","keywords_types","keywords_effects","operators","token","symbols","IDENTFST","IDENTRST","symbolic","digit","digitseq0","xdigit","xdigitseq0","INTSP","FLOATSP","fexponent","fexponent_bin","deciexp","hexiexp","irregular_keywords","ESCHAR","start","tokenizer","root","regex","action","next","cases","nextEmbedded","lexing_COMMENT_block_ml","lexing_COMMENT_block_c","lexing_COMMENT_rest","lexing_EFFECT_commaseq0","lexing_EXTCODE","lexing_DQUOTE"],"mappings":"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","file":"postiats.e04dca5c.map","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Artyom Shalkhakov. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *\r\n *  Based on the ATS/Postiats lexer by Hongwei Xi.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['(*', '*)'],\r\n    },\r\n    brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\r\n    autoClosingPairs: [\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\r\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\r\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\r\n    ]\r\n};\r\nexport var language = {\r\n    tokenPostfix: '.pats',\r\n    // TODO: staload and dynload are followed by a special kind of string literals\r\n    // with {$IDENTIFER} variables, and it also may make sense to highlight\r\n    // the punctuation (. and / and \\) differently.\r\n    // Set defaultToken to invalid to see what you do not tokenize yet\r\n    defaultToken: 'invalid',\r\n    // keyword reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing_token.dats\r\n    keywords: [\r\n        //\r\n        \"abstype\",\r\n        \"abst0ype\",\r\n        \"absprop\",\r\n        \"absview\",\r\n        \"absvtype\",\r\n        \"absviewtype\",\r\n        \"absvt0ype\",\r\n        \"absviewt0ype\",\r\n        //\r\n        \"as\",\r\n        //\r\n        \"and\",\r\n        //\r\n        \"assume\",\r\n        //\r\n        \"begin\",\r\n        //\r\n        /*\r\n                \"case\", // CASE\r\n        */\r\n        //\r\n        \"classdec\",\r\n        //\r\n        \"datasort\",\r\n        //\r\n        \"datatype\",\r\n        \"dataprop\",\r\n        \"dataview\",\r\n        \"datavtype\",\r\n        \"dataviewtype\",\r\n        //\r\n        \"do\",\r\n        //\r\n        \"end\",\r\n        //\r\n        \"extern\",\r\n        \"extype\",\r\n        \"extvar\",\r\n        //\r\n        \"exception\",\r\n        //\r\n        \"fn\",\r\n        \"fnx\",\r\n        \"fun\",\r\n        //\r\n        \"prfn\",\r\n        \"prfun\",\r\n        //\r\n        \"praxi\",\r\n        \"castfn\",\r\n        //\r\n        \"if\",\r\n        \"then\",\r\n        \"else\",\r\n        //\r\n        \"ifcase\",\r\n        //\r\n        \"in\",\r\n        //\r\n        \"infix\",\r\n        \"infixl\",\r\n        \"infixr\",\r\n        \"prefix\",\r\n        \"postfix\",\r\n        //\r\n        \"implmnt\",\r\n        \"implement\",\r\n        //\r\n        \"primplmnt\",\r\n        \"primplement\",\r\n        //\r\n        \"import\",\r\n        //\r\n        /*\r\n                \"lam\", // LAM\r\n                \"llam\", // LLAM\r\n                \"fix\", // FIX\r\n        */\r\n        //\r\n        \"let\",\r\n        //\r\n        \"local\",\r\n        //\r\n        \"macdef\",\r\n        \"macrodef\",\r\n        //\r\n        \"nonfix\",\r\n        //\r\n        \"symelim\",\r\n        \"symintr\",\r\n        \"overload\",\r\n        //\r\n        \"of\",\r\n        \"op\",\r\n        //\r\n        \"rec\",\r\n        //\r\n        \"sif\",\r\n        \"scase\",\r\n        //\r\n        \"sortdef\",\r\n        /*\r\n        // HX: [sta] is now deprecated\r\n        */\r\n        \"sta\",\r\n        \"stacst\",\r\n        \"stadef\",\r\n        \"static\",\r\n        /*\r\n                \"stavar\", // T_STAVAR\r\n        */\r\n        //\r\n        \"staload\",\r\n        \"dynload\",\r\n        //\r\n        \"try\",\r\n        //\r\n        \"tkindef\",\r\n        //\r\n        /*\r\n                \"type\", // TYPE\r\n        */\r\n        \"typedef\",\r\n        \"propdef\",\r\n        \"viewdef\",\r\n        \"vtypedef\",\r\n        \"viewtypedef\",\r\n        //\r\n        /*\r\n                \"val\", // VAL\r\n        */\r\n        \"prval\",\r\n        //\r\n        \"var\",\r\n        \"prvar\",\r\n        //\r\n        \"when\",\r\n        \"where\",\r\n        //\r\n        /*\r\n                \"for\", // T_FOR\r\n                \"while\", // T_WHILE\r\n        */\r\n        //\r\n        \"with\",\r\n        //\r\n        \"withtype\",\r\n        \"withprop\",\r\n        \"withview\",\r\n        \"withvtype\",\r\n        \"withviewtype\",\r\n    ],\r\n    keywords_dlr: [\r\n        \"$delay\",\r\n        \"$ldelay\",\r\n        //\r\n        \"$arrpsz\",\r\n        \"$arrptrsize\",\r\n        //\r\n        \"$d2ctype\",\r\n        //\r\n        \"$effmask\",\r\n        \"$effmask_ntm\",\r\n        \"$effmask_exn\",\r\n        \"$effmask_ref\",\r\n        \"$effmask_wrt\",\r\n        \"$effmask_all\",\r\n        //\r\n        \"$extern\",\r\n        \"$extkind\",\r\n        \"$extype\",\r\n        \"$extype_struct\",\r\n        //\r\n        \"$extval\",\r\n        \"$extfcall\",\r\n        \"$extmcall\",\r\n        //\r\n        \"$literal\",\r\n        //\r\n        \"$myfilename\",\r\n        \"$mylocation\",\r\n        \"$myfunction\",\r\n        //\r\n        \"$lst\",\r\n        \"$lst_t\",\r\n        \"$lst_vt\",\r\n        \"$list\",\r\n        \"$list_t\",\r\n        \"$list_vt\",\r\n        //\r\n        \"$rec\",\r\n        \"$rec_t\",\r\n        \"$rec_vt\",\r\n        \"$record\",\r\n        \"$record_t\",\r\n        \"$record_vt\",\r\n        //\r\n        \"$tup\",\r\n        \"$tup_t\",\r\n        \"$tup_vt\",\r\n        \"$tuple\",\r\n        \"$tuple_t\",\r\n        \"$tuple_vt\",\r\n        //\r\n        \"$break\",\r\n        \"$continue\",\r\n        //\r\n        \"$raise\",\r\n        //\r\n        \"$showtype\",\r\n        //\r\n        \"$vcopyenv_v\",\r\n        \"$vcopyenv_vt\",\r\n        //\r\n        \"$tempenver\",\r\n        //\r\n        \"$solver_assert\",\r\n        \"$solver_verify\",\r\n    ],\r\n    keywords_srp: [\r\n        //\r\n        \"#if\",\r\n        \"#ifdef\",\r\n        \"#ifndef\",\r\n        //\r\n        \"#then\",\r\n        //\r\n        \"#elif\",\r\n        \"#elifdef\",\r\n        \"#elifndef\",\r\n        //\r\n        \"#else\",\r\n        \"#endif\",\r\n        //\r\n        \"#error\",\r\n        //\r\n        \"#prerr\",\r\n        \"#print\",\r\n        //\r\n        \"#assert\",\r\n        //\r\n        \"#undef\",\r\n        \"#define\",\r\n        //\r\n        \"#include\",\r\n        \"#require\",\r\n        //\r\n        \"#pragma\",\r\n        \"#codegen2\",\r\n        \"#codegen3\",\r\n    ],\r\n    irregular_keyword_list: [\r\n        \"val+\",\r\n        \"val-\",\r\n        \"val\",\r\n        \"case+\",\r\n        \"case-\",\r\n        \"case\",\r\n        \"addr@\",\r\n        \"addr\",\r\n        \"fold@\",\r\n        \"free@\",\r\n        \"fix@\",\r\n        \"fix\",\r\n        \"lam@\",\r\n        \"lam\",\r\n        \"llam@\",\r\n        \"llam\",\r\n        \"viewt@ype+\",\r\n        \"viewt@ype-\",\r\n        \"viewt@ype\",\r\n        \"viewtype+\",\r\n        \"viewtype-\",\r\n        \"viewtype\",\r\n        \"view+\",\r\n        \"view-\",\r\n        \"view@\",\r\n        \"view\",\r\n        \"type+\",\r\n        \"type-\",\r\n        \"type\",\r\n        \"vtype+\",\r\n        \"vtype-\",\r\n        \"vtype\",\r\n        \"vt@ype+\",\r\n        \"vt@ype-\",\r\n        \"vt@ype\",\r\n        \"viewt@ype+\",\r\n        \"viewt@ype-\",\r\n        \"viewt@ype\",\r\n        \"viewtype+\",\r\n        \"viewtype-\",\r\n        \"viewtype\",\r\n        \"prop+\",\r\n        \"prop-\",\r\n        \"prop\",\r\n        \"type+\",\r\n        \"type-\",\r\n        \"type\",\r\n        \"t@ype\",\r\n        \"t@ype+\",\r\n        \"t@ype-\",\r\n        \"abst@ype\",\r\n        \"abstype\",\r\n        \"absviewt@ype\",\r\n        \"absvt@ype\",\r\n        \"for*\",\r\n        \"for\",\r\n        \"while*\",\r\n        \"while\"\r\n    ],\r\n    keywords_types: [\r\n        'bool',\r\n        'double',\r\n        'byte',\r\n        'int',\r\n        'short',\r\n        'char',\r\n        'void',\r\n        'unit',\r\n        'long',\r\n        'float',\r\n        'string',\r\n        'strptr'\r\n    ],\r\n    // TODO: reference for this?\r\n    keywords_effects: [\r\n        \"0\",\r\n        \"fun\",\r\n        \"clo\",\r\n        \"prf\",\r\n        \"funclo\",\r\n        \"cloptr\",\r\n        \"cloref\",\r\n        \"ref\",\r\n        \"ntm\",\r\n        \"1\" // all effects\r\n    ],\r\n    operators: [\r\n        \"@\",\r\n        \"!\",\r\n        \"|\",\r\n        \"`\",\r\n        \":\",\r\n        \"$\",\r\n        \".\",\r\n        \"=\",\r\n        \"#\",\r\n        \"~\",\r\n        //\r\n        \"..\",\r\n        \"...\",\r\n        //\r\n        \"=>\",\r\n        // \"=<\", // T_EQLT\r\n        \"=<>\",\r\n        \"=/=>\",\r\n        \"=>>\",\r\n        \"=/=>>\",\r\n        //\r\n        \"<\",\r\n        \">\",\r\n        //\r\n        \"><\",\r\n        //\r\n        \".<\",\r\n        \">.\",\r\n        //\r\n        \".<>.\",\r\n        //\r\n        \"->\",\r\n        //\"-<\", // T_MINUSLT\r\n        \"-<>\",\r\n    ],\r\n    brackets: [\r\n        { open: ',(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '`(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '%(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '\\'(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '\\'{', close: '}', token: 'delimiter.parenthesis' },\r\n        { open: '@(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '@{', close: '}', token: 'delimiter.brace' },\r\n        { open: '@[', close: ']', token: 'delimiter.square' },\r\n        { open: '#[', close: ']', token: 'delimiter.square' },\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    IDENTFST: /[a-zA-Z_]/,\r\n    IDENTRST: /[a-zA-Z0-9_'$]/,\r\n    symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\r\n    digit: /[0-9]/,\r\n    digitseq0: /@digit*/,\r\n    xdigit: /[0-9A-Za-z]/,\r\n    xdigitseq0: /@xdigit*/,\r\n    INTSP: /[lLuU]/,\r\n    FLOATSP: /[fFlL]/,\r\n    fexponent: /[eE][+-]?[0-9]+/,\r\n    fexponent_bin: /[pP][+-]?[0-9]+/,\r\n    deciexp: /\\.[0-9]*@fexponent?/,\r\n    hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\r\n    irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\r\n    ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\r\n    start: 'root',\r\n    // The main tokenizer for ATS/Postiats\r\n    // reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing.dats\r\n    tokenizer: {\r\n        root: [\r\n            // lexing_blankseq0\r\n            { regex: /[ \\t\\r\\n]+/, action: { token: '' } },\r\n            // NOTE: (*) is an invalid ML-like comment!\r\n            { regex: /\\(\\*\\)/, action: { token: 'invalid' } },\r\n            { regex: /\\(\\*/, action: { token: 'comment', next: 'lexing_COMMENT_block_ml' } },\r\n            { regex: /\\(/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },\r\n            { regex: /\\)/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },\r\n            { regex: /\\[/, action: '@brackets' /*{ token: 'delimiter.bracket' }*/ },\r\n            { regex: /\\]/, action: '@brackets' /*{ token: 'delimiter.bracket' }*/ },\r\n            { regex: /\\{/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },\r\n            { regex: /\\}/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },\r\n            // lexing_COMMA\r\n            { regex: /,\\(/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },\r\n            { regex: /,/, action: { token: 'delimiter.comma' } },\r\n            { regex: /;/, action: { token: 'delimiter.semicolon' } },\r\n            // lexing_AT\r\n            { regex: /@\\(/, action: '@brackets' /* { token: 'delimiter.parenthesis' }*/ },\r\n            { regex: /@\\[/, action: '@brackets' /* { token: 'delimiter.bracket' }*/ },\r\n            { regex: /@\\{/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },\r\n            // lexing_COLON\r\n            { regex: /:</, action: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' } },\r\n            /*\r\n            lexing_DOT:\r\n\r\n            . // SYMBOLIC => lexing_IDENT_sym\r\n            . FLOATDOT => lexing_FLOAT_deciexp\r\n            . DIGIT => T_DOTINT\r\n            */\r\n            { regex: /\\.@symbolic+/, action: { token: 'identifier.sym' } },\r\n            // FLOATDOT case\r\n            { regex: /\\.@digit*@fexponent@FLOATSP*/, action: { token: 'number.float' } },\r\n            { regex: /\\.@digit+/, action: { token: 'number.float' } },\r\n            // lexing_DOLLAR:\r\n            // '$' IDENTFST IDENTRST* => lexing_IDENT_dlr, _ => lexing_IDENT_sym\r\n            {\r\n                regex: /\\$@IDENTFST@IDENTRST*/,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords_dlr': { token: 'keyword.dlr' },\r\n                        '@default': { token: 'namespace' },\r\n                    }\r\n                }\r\n            },\r\n            // lexing_SHARP:\r\n            // '#' IDENTFST IDENTRST* => lexing_ident_srp, _ => lexing_IDENT_sym\r\n            {\r\n                regex: /\\#@IDENTFST@IDENTRST*/,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords_srp': { token: 'keyword.srp' },\r\n                        '@default': { token: 'identifier' },\r\n                    }\r\n                }\r\n            },\r\n            // lexing_PERCENT:\r\n            { regex: /%\\(/, action: { token: 'delimiter.parenthesis' } },\r\n            { regex: /^%{(#|\\^|\\$)?/, action: { token: 'keyword', next: '@lexing_EXTCODE', nextEmbedded: 'text/javascript' } },\r\n            { regex: /^%}/, action: { token: 'keyword' } },\r\n            // lexing_QUOTE\r\n            { regex: /'\\(/, action: { token: 'delimiter.parenthesis' } },\r\n            { regex: /'\\[/, action: { token: 'delimiter.bracket' } },\r\n            { regex: /'\\{/, action: { token: 'delimiter.brace' } },\r\n            [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, ['string', 'string.escape', 'string']],\r\n            [/'[^\\\\']'/, 'string'],\r\n            // lexing_DQUOTE\r\n            [/\"/, 'string.quote', '@lexing_DQUOTE'],\r\n            // lexing_BQUOTE\r\n            { regex: /`\\(/, action: '@brackets' /* { token: 'delimiter.parenthesis' }*/ },\r\n            // TODO: otherwise, try lexing_IDENT_sym\r\n            { regex: /\\\\/, action: { token: 'punctuation' } },\r\n            // lexing_IDENT_alp:\r\n            // NOTE: (?!regex) is syntax for \"not-followed-by\" regex\r\n            // to resolve ambiguity such as foreach$fwork being incorrectly lexed as [for] [each$fwork]!\r\n            { regex: /@irregular_keywords(?!@IDENTRST)/, action: { token: 'keyword' } },\r\n            {\r\n                regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\r\n                action: {\r\n                    cases: {\r\n                        // TODO: dynload and staload should be specially parsed\r\n                        // dynload whitespace+ \"special_string\"\r\n                        // this special string is really:\r\n                        //  '/' '\\\\' '.' => punctuation\r\n                        // ({\\$)([a-zA-Z_][a-zA-Z_0-9]*)(}) => punctuation,keyword,punctuation\r\n                        // [^\"] => identifier/literal\r\n                        '@keywords': { token: 'keyword' },\r\n                        '@keywords_types': { token: 'type' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            },\r\n            // lexing_IDENT_sym:\r\n            { regex: /\\/\\/\\/\\//, action: { token: 'comment', next: '@lexing_COMMENT_rest' } },\r\n            { regex: /\\/\\/.*$/, action: { token: 'comment' } },\r\n            { regex: /\\/\\*/, action: { token: 'comment', next: '@lexing_COMMENT_block_c' } },\r\n            // AS-20160627: specifically for effect annotations\r\n            { regex: /-<|=</, action: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' } },\r\n            {\r\n                regex: /@symbolic+/,\r\n                action: {\r\n                    cases: {\r\n                        '@operators': 'keyword',\r\n                        '@default': 'operator'\r\n                    }\r\n                }\r\n            },\r\n            // lexing_ZERO:\r\n            // FIXME: this one is quite messy/unfinished yet\r\n            // TODO: lexing_INT_hex\r\n            // - testing_hexiexp => lexing_FLOAT_hexiexp\r\n            // - testing_fexponent_bin => lexing_FLOAT_hexiexp\r\n            // - testing_intspseq0 => T_INT_hex\r\n            // lexing_INT_hex:\r\n            { regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/, action: { token: 'number.float' } },\r\n            { regex: /0[xX]@xdigit+@INTSP*/, action: { token: 'number.hex' } },\r\n            { regex: /0[0-7]+(?![0-9])@INTSP*/, action: { token: 'number.octal' } },\r\n            //{regex: /0/, action: { token: 'number' } }, // INTZERO\r\n            // lexing_INT_dec:\r\n            // - testing_deciexp => lexing_FLOAT_deciexp\r\n            // - testing_fexponent => lexing_FLOAT_deciexp\r\n            // - otherwise => intspseq0 ([0-9]*[lLuU]?)\r\n            { regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/, action: { token: 'number.float' } },\r\n            { regex: /@digit@digitseq0@INTSP*/, action: { token: 'number.decimal' } },\r\n            // DIGIT, if followed by digitseq0, is lexing_INT_dec\r\n            { regex: /@digit+@INTSP*/, action: { token: 'number' } },\r\n        ],\r\n        lexing_COMMENT_block_ml: [\r\n            [/[^\\(\\*]+/, 'comment'],\r\n            [/\\(\\*/, 'comment', '@push'],\r\n            [/\\(\\*/, 'comment.invalid'],\r\n            [/\\*\\)/, 'comment', '@pop'],\r\n            [/\\*/, 'comment']\r\n        ],\r\n        lexing_COMMENT_block_c: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            // [/\\/\\*/, 'comment', '@push' ],    // nested C-style block comments not allowed\r\n            // [/\\/\\*/,    'comment.invalid' ],\t// NOTE: this breaks block comments in the shape of /* //*/\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        lexing_COMMENT_rest: [\r\n            [/$/, 'comment', '@pop'],\r\n            [/.*/, 'comment']\r\n        ],\r\n        // NOTE: added by AS, specifically for highlighting\r\n        lexing_EFFECT_commaseq0: [\r\n            {\r\n                regex: /@IDENTFST@IDENTRST+|@digit+/,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords_effects': { token: 'type.effect' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            },\r\n            { regex: /,/, action: { token: 'punctuation' } },\r\n            { regex: />/, action: { token: '@rematch', next: '@pop' } },\r\n        ],\r\n        lexing_EXTCODE: [\r\n            { regex: /^%}/, action: { token: '@rematch', next: '@pop', nextEmbedded: '@pop' } },\r\n            { regex: /[^%]+/, action: '' },\r\n        ],\r\n        lexing_DQUOTE: [\r\n            { regex: /\"/, action: { token: 'string.quote', next: '@pop' } },\r\n            // AS-20160628: additional hi-lighting for variables in staload/dynload strings\r\n            { regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/, action: [{ token: 'string.escape' }, { token: 'identifier' }, { token: 'string.escape' }] },\r\n            { regex: /\\\\$/, action: { token: 'string.escape' } },\r\n            { regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/, action: { token: 'string.escape' } },\r\n            { regex: /[^\\\\\"]+/, action: { token: 'string' } }\r\n        ],\r\n    },\r\n};\r\n"]}