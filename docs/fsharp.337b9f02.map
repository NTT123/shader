{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/fsharp/fsharp.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","symbols","escapes","integersuffix","floatsuffix","tokenizer","root","cases","token","include","next","whitespace","comment","string","litstring"],"mappings":"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","file":"fsharp.337b9f02.map","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['(*', '*)'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' }\r\n    ],\r\n    folding: {\r\n        markers: {\r\n            start: new RegExp(\"^\\\\s*//\\\\s*#region\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#region(.*)\\\\*\\\\)\"),\r\n            end: new RegExp(\"^\\\\s*//\\\\s*#endregion\\\\b|^\\\\s*\\\\(\\\\*\\\\s*#endregion\\\\s*\\\\*\\\\)\")\r\n        }\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.fs',\r\n    keywords: [\r\n        'abstract', 'and', 'atomic', 'as',\r\n        'assert', 'asr', 'base', 'begin',\r\n        'break', 'checked', 'component',\r\n        'const', 'constraint', 'constructor',\r\n        'continue', 'class', 'default',\r\n        'delegate', 'do', 'done', 'downcast',\r\n        'downto', 'elif', 'else', 'end',\r\n        'exception', 'eager', 'event', 'external',\r\n        'extern', 'false', 'finally', 'for',\r\n        'fun', 'function', 'fixed', 'functor',\r\n        'global', 'if', 'in', 'include', 'inherit',\r\n        'inline', 'interface', 'internal', 'land',\r\n        'lor', 'lsl', 'lsr', 'lxor', 'lazy', 'let',\r\n        'match', 'member', 'mod', 'module', 'mutable',\r\n        'namespace', 'method', 'mixin', 'new', 'not',\r\n        'null', 'of', 'open', 'or', 'object',\r\n        'override', 'private', 'parallel', 'process',\r\n        'protected', 'pure', 'public', 'rec', 'return',\r\n        'static', 'sealed', 'struct', 'sig', 'then',\r\n        'to', 'true', 'tailcall', 'trait',\r\n        'try', 'type', 'upcast', 'use',\r\n        'val', 'void', 'virtual', 'volatile',\r\n        'when', 'while', 'with', 'yield'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\^%;\\.,\\/]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    integersuffix: /[uU]?[yslnLI]?/,\r\n    floatsuffix: /[fFmM]?/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/[a-zA-Z_]\\w*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // [< attributes >].\r\n            [/\\[<.*>\\]/, 'annotation'],\r\n            // Preprocessor directive\r\n            [/^#(if|else|endif)/, 'keyword'],\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/@symbols/, 'delimiter'],\r\n            // numbers\r\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?(@floatsuffix)/, 'number.float'],\r\n            [/0x[0-9a-fA-F]+LF/, 'number.float'],\r\n            [/0x[0-9a-fA-F]+(@integersuffix)/, 'number.hex'],\r\n            [/0b[0-1]+(@integersuffix)/, 'number.bin'],\r\n            [/\\d+(@integersuffix)/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"\"\"/, 'string', '@string.\"\"\"'],\r\n            [/\"/, 'string', '@string.\"'],\r\n            // literal string\r\n            [/\\@\"/, { token: 'string.quote', next: '@litstring' }],\r\n            // characters\r\n            [/'[^\\\\']'B?/, 'string'],\r\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n            [/'/, 'string.invalid']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\(\\*(?!\\))/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^\\*]+/, 'comment'],\r\n            [/\\*\\)/, 'comment', '@pop'],\r\n            [/\\*/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/(\"\"\"|\"B?)/, {\r\n                    cases: {\r\n                        '$#==$S2': { token: 'string', next: '@pop' },\r\n                        '@default': 'string'\r\n                    }\r\n                }]\r\n        ],\r\n        litstring: [\r\n            [/[^\"]+/, 'string'],\r\n            [/\"\"/, 'string.escape'],\r\n            [/\"/, { token: 'string.quote', next: '@pop' }]\r\n        ],\r\n    },\r\n};\r\n"]}