{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/go/go.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","tokenizer","root","cases","token","include","whitespace","comment","doccomment","string","rawstring"],"mappings":"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","file":"go.e1ce1069.map","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/'],\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '`', close: '`', notIn: ['string'] },\r\n        { open: '\"', close: '\"', notIn: ['string'] },\r\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '`', close: '`' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.go',\r\n    keywords: [\r\n        'break',\r\n        'case',\r\n        'chan',\r\n        'const',\r\n        'continue',\r\n        'default',\r\n        'defer',\r\n        'else',\r\n        'fallthrough',\r\n        'for',\r\n        'func',\r\n        'go',\r\n        'goto',\r\n        'if',\r\n        'import',\r\n        'interface',\r\n        'map',\r\n        'package',\r\n        'range',\r\n        'return',\r\n        'select',\r\n        'struct',\r\n        'switch',\r\n        'type',\r\n        'var',\r\n        'bool',\r\n        'true',\r\n        'false',\r\n        'uint8',\r\n        'uint16',\r\n        'uint32',\r\n        'uint64',\r\n        'int8',\r\n        'int16',\r\n        'int32',\r\n        'int64',\r\n        'float32',\r\n        'float64',\r\n        'complex64',\r\n        'complex128',\r\n        'byte',\r\n        'rune',\r\n        'uint',\r\n        'int',\r\n        'uintptr',\r\n        'string',\r\n        'nil',\r\n    ],\r\n    operators: [\r\n        '+', '-', '*', '/', '%', '&', '|', '^', '<<', '>>', '&^',\r\n        '+=', '-=', '*=', '/=', '%=', '&=', '|=', '^=', '<<=', '>>=', '&^=',\r\n        '&&', '||', '<-', '++', '--', '==', '<', '>', '=', '!', '!=', '<=', '>=', ':=', '...',\r\n        '(', ')', '', ']', '{', '}', ',', ';', '.', ':'\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [/[a-zA-Z_]\\w*/, {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // [[ attributes ]].\r\n            [/\\[\\[.*\\]\\]/, 'annotation'],\r\n            // Preprocessor directive\r\n            [/^\\s*#\\w+/, 'keyword'],\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [/@symbols/, {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }],\r\n            // numbers\r\n            [/\\d*\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, 'number.hex'],\r\n            [/0[0-7']*[0-7]/, 'number.octal'],\r\n            [/0[bB][0-1']*[0-1]/, 'number.binary'],\r\n            [/\\d[\\d']*/, 'number'],\r\n            [/\\d/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, 'string', '@string'],\r\n            [/`/, \"string\", \"@rawstring\"],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\r\n            [/'/, 'string.invalid']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@doccomment'],\r\n            [/\\/\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment'],\r\n        ],\r\n        comment: [\r\n            [/[^\\/*]+/, 'comment'],\r\n            // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\r\n            // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\r\n            [/\\*\\//, 'comment', '@pop'],\r\n            [/[\\/*]/, 'comment']\r\n        ],\r\n        //Identical copy of comment above, except for the addition of .doc\r\n        doccomment: [\r\n            [/[^\\/*]+/, 'comment.doc'],\r\n            // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\r\n            [/\\/\\*/, 'comment.doc.invalid'],\r\n            [/\\*\\//, 'comment.doc', '@pop'],\r\n            [/[\\/*]/, 'comment.doc']\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@pop']\r\n        ],\r\n        rawstring: [\r\n            [/[^\\`]/, \"string\"],\r\n            [/`/, \"string\", \"@pop\"]\r\n        ],\r\n    },\r\n};\r\n"]}