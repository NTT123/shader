{"version":3,"sources":["node_modules/monaco-editor/esm/vs/basic-languages/yaml/yaml.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","offSide","language","tokenPostfix","token","keywords","numberInteger","numberFloat","numberOctal","numberHex","numberInfinity","numberNaN","numberDate","escapes","tokenizer","root","include","cases","object","array","multiString","multiStringContinued","next","whitespace","comment","flowCollections","flowScalars","doubleQuotedString","blockStyle","flowNumber","tagHandle","anchor"],"mappings":"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","file":"yaml.4f57e960.map","sourcesContent":["export var conf = {\r\n    comments: {\r\n        lineComment: '#'\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '\"', close: '\"' },\r\n        { open: '\\'', close: '\\'' },\r\n    ],\r\n    folding: {\r\n        offSide: true\r\n    }\r\n};\r\nexport var language = {\r\n    tokenPostfix: '.yaml',\r\n    brackets: [\r\n        { token: 'delimiter.bracket', open: '{', close: '}' },\r\n        { token: 'delimiter.square', open: '[', close: ']' }\r\n    ],\r\n    keywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],\r\n    numberInteger: /(?:0|[+-]?[0-9]+)/,\r\n    numberFloat: /(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,\r\n    numberOctal: /0o[0-7]+/,\r\n    numberHex: /0x[0-9a-fA-F]+/,\r\n    numberInfinity: /[+-]?\\.(?:inf|Inf|INF)/,\r\n    numberNaN: /\\.(?:nan|Nan|NAN)/,\r\n    numberDate: /\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,\r\n    escapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\r\n    tokenizer: {\r\n        root: [\r\n            { include: '@whitespace' },\r\n            { include: '@comment' },\r\n            // Directive\r\n            [/%[^ ]+.*$/, 'meta.directive'],\r\n            // Document Markers\r\n            [/---/, 'operators.directivesEnd'],\r\n            [/\\.{3}/, 'operators.documentEnd'],\r\n            // Block Structure Indicators\r\n            [/[-?:](?= )/, 'operators'],\r\n            { include: '@anchor' },\r\n            { include: '@tagHandle' },\r\n            { include: '@flowCollections' },\r\n            { include: '@blockStyle' },\r\n            // Numbers\r\n            [/@numberInteger(?![ \\t]*\\S+)/, 'number'],\r\n            [/@numberFloat(?![ \\t]*\\S+)/, 'number.float'],\r\n            [/@numberOctal(?![ \\t]*\\S+)/, 'number.octal'],\r\n            [/@numberHex(?![ \\t]*\\S+)/, 'number.hex'],\r\n            [/@numberInfinity(?![ \\t]*\\S+)/, 'number.infinity'],\r\n            [/@numberNaN(?![ \\t]*\\S+)/, 'number.nan'],\r\n            [/@numberDate(?![ \\t]*\\S+)/, 'number.date'],\r\n            // Key:Value pair\r\n            [/(\".*?\"|'.*?'|.*?)([ \\t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']],\r\n            { include: '@flowScalars' },\r\n            // String nodes\r\n            [/.+$/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'string'\r\n                    }\r\n                }]\r\n        ],\r\n        // Flow Collection: Flow Mapping\r\n        object: [\r\n            { include: '@whitespace' },\r\n            { include: '@comment' },\r\n            // Flow Mapping termination\r\n            [/\\}/, '@brackets', '@pop'],\r\n            // Flow Mapping delimiter\r\n            [/,/, 'delimiter.comma'],\r\n            // Flow Mapping Key:Value delimiter\r\n            [/:(?= )/, 'operators'],\r\n            // Flow Mapping Key:Value key\r\n            [/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/, 'type'],\r\n            // Start Flow Style\r\n            { include: '@flowCollections' },\r\n            { include: '@flowScalars' },\r\n            // Scalar Data types\r\n            { include: '@tagHandle' },\r\n            { include: '@anchor' },\r\n            { include: '@flowNumber' },\r\n            // Other value (keyword or string)\r\n            [/[^\\},]+/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'string'\r\n                    }\r\n                }]\r\n        ],\r\n        // Flow Collection: Flow Sequence\r\n        array: [\r\n            { include: '@whitespace' },\r\n            { include: '@comment' },\r\n            // Flow Sequence termination\r\n            [/\\]/, '@brackets', '@pop'],\r\n            // Flow Sequence delimiter\r\n            [/,/, 'delimiter.comma'],\r\n            // Start Flow Style\r\n            { include: '@flowCollections' },\r\n            { include: '@flowScalars' },\r\n            // Scalar Data types\r\n            { include: '@tagHandle' },\r\n            { include: '@anchor' },\r\n            { include: '@flowNumber' },\r\n            // Other value (keyword or string)\r\n            [/[^\\],]+/, {\r\n                    cases: {\r\n                        '@keywords': 'keyword',\r\n                        '@default': 'string'\r\n                    }\r\n                }]\r\n        ],\r\n        // First line of a Block Style\r\n        multiString: [\r\n            [/^( +).+$/, 'string', '@multiStringContinued.$1']\r\n        ],\r\n        // Further lines of a Block Style\r\n        //   Workaround for indentation detection\r\n        multiStringContinued: [\r\n            [/^( *).+$/, {\r\n                    cases: {\r\n                        '$1==$S2': 'string',\r\n                        '@default': { token: '@rematch', next: '@popall' }\r\n                    }\r\n                }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white']\r\n        ],\r\n        // Only line comments\r\n        comment: [\r\n            [/#.*$/, 'comment']\r\n        ],\r\n        // Start Flow Collections\r\n        flowCollections: [\r\n            [/\\[/, '@brackets', '@array'],\r\n            [/\\{/, '@brackets', '@object']\r\n        ],\r\n        // Start Flow Scalars (quoted strings)\r\n        flowScalars: [\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'[^']*'/, 'string'],\r\n            [/\"/, 'string', '@doubleQuotedString']\r\n        ],\r\n        doubleQuotedString: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"/, 'string', '@pop']\r\n        ],\r\n        // Start Block Scalar\r\n        blockStyle: [\r\n            [/[>|][0-9]*[+-]?$/, 'operators', '@multiString']\r\n        ],\r\n        // Numbers in Flow Collections (terminate with ,]})\r\n        flowNumber: [\r\n            [/@numberInteger(?=[ \\t]*[,\\]\\}])/, 'number'],\r\n            [/@numberFloat(?=[ \\t]*[,\\]\\}])/, 'number.float'],\r\n            [/@numberOctal(?=[ \\t]*[,\\]\\}])/, 'number.octal'],\r\n            [/@numberHex(?=[ \\t]*[,\\]\\}])/, 'number.hex'],\r\n            [/@numberInfinity(?=[ \\t]*[,\\]\\}])/, 'number.infinity'],\r\n            [/@numberNaN(?=[ \\t]*[,\\]\\}])/, 'number.nan'],\r\n            [/@numberDate(?=[ \\t]*[,\\]\\}])/, 'number.date']\r\n        ],\r\n        tagHandle: [\r\n            [/\\![^ ]*/, 'tag']\r\n        ],\r\n        anchor: [\r\n            [/[&*][^ ]+/, 'namespace']\r\n        ]\r\n    }\r\n};\r\n"]}